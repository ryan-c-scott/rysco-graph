#+options: toc:nil

* Introduction
Originally developed for my Emacs setup "Ryscomacs", rysco-graph is a domain specific language in Lisp for the Graphviz dot syntax and tools.

Many options are simply passed through, while other common patterns are made easier through macros.

See below for examples:

* Installation
** Using straight.el
#+begin_src elisp :eval never
  (straight-use-package '(rysco-graph :type git :repo "git@bitbucket.org:scott105/rysco-graph.git"))
#+end_src

* Syntax and Examples

** :labels
:PROPERTIES:
:ID:       ac2a6225-c58f-4cb4-83b8-dbc4afe10bfb
:END:
All connections with labels have a color generated for each unique label string. That color is used for all occurrences of that string.

To override this, ~:labels~ can be used to set explicit colors for certain strings.

#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:labels
      test magenta
      "other test" cyan
      thing "#AFA0FF")
  
     (:chain a [test] b
             (:fan ["other test"] c
                   [something] d)
             [thing] e
             [random] a)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--labels.svg]]

** :chain
:PROPERTIES:
:ID:       7ef5485c-997f-4122-8322-d5b435b6eeeb
:END:
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:chain a b c)
     (:chain b [label text] d)
     (:chain
      e f g
      :break ;Breaks chain and effectively starts a new one
      h i j a)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--chain.svg]]

You can switch the arrow direction at anytime with ~>~ and ~<~.

#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:chain a b < c d e > f g)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--chain.svg]]

** :fan
:PROPERTIES:
:ID:       6b103ba2-759e-4d6e-b094-45ca2f0d0b96
:END:
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:chain a b [label] (:fan c d e) [results] f)
     (:chain b (:fan [individual] a [item] x [labels] y))))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--fan.svg]]

** :group and :cluster
:PROPERTIES:
:ID:       5188b615-c30d-41c5-9b53-427ec847e61f
:END:
~:group~ creates a logical grouping of nodes for applying styling, borders, and generally grouping things.
~:cluster~ similarly creates a group, but also then adds the cluster name to all generated names as =cluster_node=.
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:group
      thisgroup
      (:properties :label "GROUP")
      a
      (b :label "Node B")
      c)
  
     (:cluster
      thiscluster
      (:properties :label "CLUSTER")
      a
      b
      c)
  
     (:chain a b [scoped] (:fan thiscluster_a thiscluster_c))
     (:chain b ["not scoped"] c)))
      
#+end_src

#+RESULTS:
[[file:Syntax and Examples--group and -cluster.svg]]

** :node
:PROPERTIES:
:ID:       c430e173-b025-4c0f-9ff2-6d2e01f25bd1
:END:
A shorthand for specifying the default properties of nodes.
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:node :shape circle :color cyan)
     (:chain a (:fan b c d) e)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--node.svg]]

** :rank
:PROPERTIES:
:ID:       feb3b50a-e0d2-4d50-90cf-fee90a6d5dad
:END:
For setting the explicit =rank= of a list of nodes.
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:chain a b c d)))
     
#+end_src

#+RESULTS:
[[file:Syntax and Examples--rank.svg]]

#+begin_src elisp :results file :exports both
  (rysco-graph
   '(:filename "Syntax and Examples--rank-alt1.svg")
   '((:rank min c d)
     (:chain a b c d)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--rank-alt1.svg]]

#+begin_src elisp :results file :exports both
  (rysco-graph
   '(:filename "Syntax and Examples--rank-alt2.svg")
   '((:rank same a b)
     (:rank min c d)
     (:chain a b c d)))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--rank-alt2.svg]]

** :properties
** :scope
:PROPERTIES:
:ID:       fc4d3c4f-b446-45c7-9c14-9b7bd67112be
:END:
The ~:scope~ helper is to make working with clusters (and nested clusters) more convenient.
Prefixing a node name with =^= will cause that node name to be evaluated without any scoping.

#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:group
      thisgroup
      (:properties :label "GROUP")
      a
      (b :label "Node B")
      c)
  
     (:cluster
      thiscluster
      (:properties :label "CLUSTER")
      a
      b
      c)
     
     (:chain a ["not scoped"] b [scoped] (:scope thiscluster
                                                 :chain a [scoped] (:fan b c) [absolute] ^c))
     (:chain b ["not scoped"] c)))
  
#+end_src

#+RESULTS:
[[file:Syntax and Examples--scope.svg]]

** :sequence
This complex type creates channels of nodes that are connected to show a sequence. It... just makes more sense if you see it.
#+begin_src elisp :results file :exports both
  (rysco-graph
   nil
   '((:sequence
      test
      ((a "Alice")
       (b "Bob" :fillcolor cyan :shape diamond)
       (c "Charlie")
       (d "Sally"))
      (a d "I'm busy" :color red :style dotted)
      (a c "Hey")
      (c b "What to do?!")
      (b c "???!")
      (c a "Oh.  Hey you!"))))
#+end_src

#+RESULTS:
[[file:Syntax and Examples--sequence.svg]]
